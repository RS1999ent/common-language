Folder overview:

BRITE - holds source for BRITE topology generator (see it's readme for
compile and running information)

comonLanguage_old - old files for when we were working with
Floodlight, deprecated

deps - holds simulator dependency jar files (argparser and snakeyaml)

simulator - all files having to do with IA simulator

simulator/datasets - where the raw topology data is stored to be
converted by scripts

simulator/formattedData - data that is ready for the simulator to use
as well as the intermediate transitions of the raw data

simulator/results - results of old experiments not relevent anymore

simulator/src - java source for the simulator

simulator/scripts - holds python, awk, and bash scripts for converting
raw data and running the simulator are stored

scripts:
scripts used for SUBMIT:
annotateBrite.awk, richWorldASTypes.py, compileSim.sh
experiment_scripts/runExpScratchFileLinux.sh
matplotscripts/richworldGenerateGraphAverageX.py


General Workflow for getting results (see below for specifics on how to run scripts):
1. Generate an AS topology using brite (or skip and just  use one of the BRITE files in /dataset)
2. run anotateBrite.awk on that file, save output (or skip and just use one of the annotated BRITE in
/formattedData)
3. run richWorldASTypes on formatted and annotated topology file from step 2
take topofile generated in step 2 and astypes file generated in step 3
4.  run the simultor

OR

1.   Generate an AS topology using brite (or skip and just  use one of the BRITE files in /dataset)
2.  run anotateBrite.awk on that file, save output to /formattedData/annotatedBrite.txt <--important
3.  run ./runExpScratchFileLinux.sh (with relevent command arguments
it expects the annotated topo file to be located in /formattedData/annotatedBrite.txt

compileSim.sh - uses relative path to compile simulator

annotateBrite.awk - converts raw BRITE topology into
simulator topology format
usage:
gawk -f annotateBrite.awk "BRITE_TOPO" > "outputFile"

richWorldASTypes.py - generates asTypes file to be used in the simulator
annotatedData - file generated by annotateBrite.awk
Fraction - fraction of ASes to upgrade (betwen 0 and 1)
protocolType - 501 = wiser, 505 = bw, 507 = replacement
useRichWorld = 0 for normal generation (gulfs are BGP), 1 for richworld generation (where gulfs are made up of other protocols
Usage:
python richWorldASTypes "annotatedData" "asTypesOutputFile" --numTransits "Fraction" --seedTransit "rgeneratorSeed_for_picking_transits" --sim "protocolType" --randomMethod "HowToPick" --richworld "useRichWorld" 

experiment_scripts/runExpScratchFileLinux.sh - runs simultor over multiple trials/seeds for generating
ASes. Currently 10 trials per 10 percent of ASes upgraded. printed output should
go to file for use in graph generation

Important, it expects topo file to located in /formattedData and named "annotatedBrite.txt"

arg1 - what astypes to generate (501 = wiser, 505 = bw, 507 = replacement)
arg2 - where to monitor from in the simulator (0 = participating, 1 = all, 2 = gulf)
currently the simulator disregards this by computing all statistics, but might
be useful later
arg3 - max number of propagated paths (scion option to compress number of path blowup
arg4 - what random method to use in picking ASes to upgrade
- 0 = pool, pick from equal fractions of stub and transit ASes (i.e take fraction = .1, then pick .1 stub and
.1 transit
- 1 = weighted - picks ASes randomly, giving higher weight to higher degree nodes
- 2 = uniform - each AS has an equal chance to be upgraded
arg5 - string for the legend name for the experiment
arg6 - 0 = don't do rich world generation
       1 = do rich world generation

It will create astype files in ../../formattedData
example Usage
./runExpScratchFileLinux.sh 505 1 10 2 "testlegend" 0

matplotscripts/richworldGenerateGraphAverageX.py: creates a graph based on the
text printed out by runExpScratchFileLinux.sh

--xlabel - What to label the x axis
--ylable - what to label the y axis
--title - name of the pdf
--scale - value to scale the values down (e.g. scale=1000 then 1000 would scale to 1) (default 1)
--metric - "RIB" or "FIB"make grpah based on sum of paths in RIB to a dest or just the sum of best paths (default "FIB")
--legendLoc - pyplot place to put legend (default 2)
--raw - 1, don't break y axis, default 0
File- can take in multiple files of runExpScratchFileLinux output, each file corresponds to a line
exampleusage:
python richworldGenerateGraphAverageX.py line1file line2file --xlable "test" --ylable "test" --title "test"

Running simulator as a oneOff.
Main class is located in src/simulator/Simulator.simulator
dependencies located in commonlanguage/deps
Commandline args
ASRelationships file - topology file generated by annotateBrite.awk
ASTypesFile - type file generated by richworldAStypes.py (positionally must be after asRelationships
outFile - file to put output (will only be filled if debug() function is modified in simulator)
--seed - simulator seed
--sim - what sim to run (use 3, its is the only one implmented after cleanup)
--monitorFrom - where to measure from (0 - participating, 1 - all, 2 - gulf). For sim=3 this value doesn't
matter
--forX - xvalue to use when printing stuff (relevent for richworldgenerategrpahaverageX.py)
--maxPaths - max paths to propagate when doing replacemetn sim (default 10)

exampleusage:
<java stuff> Simulator.simulator topoFile AStypes outfile --seed 1 --sim 3 --forX .2


///////////////////////////////////////
/////// SCRIPTS NOT NEEDED/USED FOR   /////
//////  SUBMIT, STILL DOCUMENTED ////
//////////////////////////////////////

annotateCAIDA.py - works with only a raw caida file and assigns link
latencies based on a distribution (given by a file) output is a topo
formated for use with the simulator.  Requires scipy python module to
be installed
input requires a converted caida file generated by
"convert_caida_dataset.awk"
input requires a latencyDistribution file
generated by "latencyDistribution.awk"
usage:
python annotateCAIDA.py "convertedCAIDAFile" "latencyDistributionFile" "outputFIle" --distSeed "seedVal"

annotateIplaneData.py - annotate iplane data with asrelationships, creates a topo file
of a format that the simulator can use
IplaneInterASFile - raw file found on iplane website
convertedCAIDAFile - file generated by "convert_caida_dataset.awk"
simulatorFormatOutputFile - output to be used by the simulator
cadaNiplaneFile - log file for holding caida data not in iplane dataset
iplaneNcaida - log file for holding iplane data not in caida
usage:
python annotateIplaneData.py "IplaneInterASFile" "convertedCAIDAFile" "simulatorFormatOutputFile" "caidaNiplaneFile" "iplaneNcaidaFile"

asTypes - generates AStypes for simulator experiment.  This tells the simulator what protocol
ASes support. Uses the pool method for pickign transits (i.e. an equal percentage of stubs and transits
are chosen to be upgraded to new protocol).  Uses richworldASTypes.py to be able to control this.
annotatedDataFile - converted file using either "convert_caida_dataset" -> (annotateCaida.py || annotateIplaneData.py) or annotateBrite.awk
outputFile - output file wher etypes are written, used by the simulator
protocolType - assigns protocol number based on the experiment.  use "501" for wiser exp, "505" for bw exp, "507" replacement exp
fraction - percentage of transits to support the new protocol (values 0 to 1)
usage:
python asTypes.py "annotatedDataFile" "outputFile" --numTransits "fraction" --seedTransits "rgeneratorSeed" --sim "protocolType"


computeIntraDomainCosts.py - takes a intraASInterPoP file and precomputes intradomain latencies
intraASinterPoPFile - file generated by "intraASInterPoP.awk"
usage:
python computeIntraDomainCosts.py "intraASinterPoPFile" "outputFile"

convert_caida_dataset.awk - converts raw caida file into intermidiate file used by other scripts
usage:
gawk -f convert_caida_dataset.awk "rawCAIDAfile" > "intermideateCAIDAFile"

findStubs.py - generates file of as stubs arranged by number of neighbors (not used
for anything in the simulator)
annotatedData - converted file using either "convert_caida_dataset" -> (annotateCaida.py || annotateIplaneData.py) or annotateBrite.awk
usage:
python findStubs.py "annotatedData" "outputfile"

intraASInterPoP.awk - takes in raw iplane file and creates intra as inter pop file to be used by
"computeIntraDomainCosts.py"
interASFile - interaspop
usage:
gawk -f intraASInterPoP "rawIplaneFile" -v interASFile="interASFile" -v intraASFile="outputFile"

iplaneNcaidaInfoGathering.py - Program to gather information as to why
iplane data does not appear in the CAIDA dataset.  Requires
iplaneNcaida file generated by annotateIplaneData.py and converted
CAIDA file produced by convert_caida_dataset"
iplaneNcaidaFile - file containing iplane links not in caida
caidadataset - caida relationships converted by convert_caida_dataset
usage:
python iplanecaidaInfoGathering.py "iplaneNcaidaFile" "caidaDataset"

latencyDistribution.awk - script takes interASinterPoP file generated by using iplane data on
intraASInterPoP.awk and outputs the probability of each latency ignoring -9999

usage:
gawk -f latencyDistribution "interASinterPoP" > "latencyDistribution"

///////////////////////////////////////
/////// end SCRIPTS NOT NEEDED FOR   /
//////  SUBMIT, STILL DOCUMENTED ////
//////////////////////////////////////
