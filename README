Folder overview:

BRITE - holds source for BRITE topology generator (see it's readme for
compile and running information)

comonLanguage_old - old files for when we were working with
Floodlight, deprecated

deps - holds simulator dependency jar files (argparser and snakeyaml)

simulator - all files having to do with IA simulator

simulator/datasets - where the raw topology data is stored to be
converted by scripts

simulator/formattedData - data that is ready for the simulator to use
as well as the intermediate transitions of the raw data

simulator/results - results of old experiments not relevent anymore

simulator/src - java source for the simulator

simulator/scripts - holds python, awk, and bash scripts for converting
raw data and running the simulator are stored

scripts:
scripts used for SUBMIT:
annotateBrite.awk, richWorldASTypes.py, compileSim.sh
experiment_scripts/runExpScratchFileLinux.sh
matplotscripts/richworldGenerateGraphAverageX.py

compileSim.sh - uses relative path to compile simulator

annotateBrite.awk - converts raw BRITE topology into
simulator topology format
example usage:
gawk -f annotateBrite.awk "BRITE_TOPO" > "outputFile"

richWorldASTypes.py - generates asTypes file to be used in the simulator
annotatedData - file generated by annotateBrite.awk
Fraction - fraction of ASes to upgrade (betwen 0 and 1)
protocolType - 501 = wiser, 505 = bw, 507 = replacement
useRichWorld = 0 for normal generation (gulfs are BGP), 1 for richworld generation (where gulfs are made up of other protocols
exampleUsage:
python richWorldASTypes "annotatedData" "asTypesOutputFile" --numTransits "Fraction" --seedTransit "rgeneratorSeed_for_picking_transits" --sim "protocolType" --randomMethod "HowToPick" --richworld "useRichWorld" 



///////////////////////////////////////
/////// SCRIPTS NOT NEEDED/USED FOR   /////
//////  SUBMIT, STILL DOCUMENTED ////
//////////////////////////////////////

annotateCAIDA.py - works with only a raw caida file and assigns link
latencies based on a distribution (given by a file) output is a topo
formated for use with the simulator.  Requires scipy python module to
be installed
input requires a converted caida file generated by
"convert_caida_dataset.awk"
input requires a latencyDistribution file
generated by "latencyDistribution.awk"
example usage:
python annotateCAIDA.py "convertedCAIDAFile" "latencyDistributionFile" "outputFIle" --distSeed "seedVal"

annotateIplaneData.py - annotate iplane data with asrelationships, creates a topo file
of a format that the simulator can use
IplaneInterASFile - raw file found on iplane website
convertedCAIDAFile - file generated by "convert_caida_dataset.awk"
simulatorFormatOutputFile - output to be used by the simulator
cadaNiplaneFile - log file for holding caida data not in iplane dataset
iplaneNcaida - log file for holding iplane data not in caida
exampleusage:
python annotateIplaneData.py "IplaneInterASFile" "convertedCAIDAFile" "simulatorFormatOutputFile" "caidaNiplaneFile" "iplaneNcaidaFile"

asTypes - generates AStypes for simulator experiment.  This tells the simulator what protocol
ASes support. Uses the pool method for pickign transits (i.e. an equal percentage of stubs and transits
are chosen to be upgraded to new protocol).  Uses richworldASTypes.py to be able to control this.
annotatedDataFile - converted file using either "convert_caida_dataset" -> (annotateCaida.py || annotateIplaneData.py) or annotateBrite.awk
outputFile - output file wher etypes are written, used by the simulator
protocolType - assigns protocol number based on the experiment.  use "501" for wiser exp, "505" for bw exp, "507" replacement exp
fraction - percentage of transits to support the new protocol (values 0 to 1)
exampleusage:
python asTypes.py "annotatedDataFile" "outputFile" --numTransits "fraction" --seedTransits "rgeneratorSeed" --sim "protocolType"


computeIntraDomainCosts.py - takes a intraASInterPoP file and precomputes intradomain latencies
intraASinterPoPFile - file generated by "intraASInterPoP.awk"
exampleUsage:
python computeIntraDomainCosts.py "intraASinterPoPFile" "outputFile"

convert_caida_dataset.awk - converts raw caida file into intermidiate file used by other scripts
exampleusage:
gawk -f convert_caida_dataset.awk "rawCAIDAfile" > "intermideateCAIDAFile"

findStubs.py - generates file of as stubs arranged by number of neighbors (not used
for anything in the simulator)
annotatedData - converted file using either "convert_caida_dataset" -> (annotateCaida.py || annotateIplaneData.py) or annotateBrite.awk
exampleusage:
python findStubs.py "annotatedData" "outputfile"

intraASInterPoP.awk - takes in raw iplane file and creates intra as inter pop file to be used by
"computeIntraDomainCosts.py"
interASFile - interaspop
exampleusage:
gawk -f intraASInterPoP "rawIplaneFile" -v interASFile="interASFile" -v intraASFile="outputFile"

iplaneNcaidaInfoGathering.py - Program to gather information as to why
iplane data does not appear in the CAIDA dataset.  Requires
iplaneNcaida file generated by annotateIplaneData.py and converted
CAIDA file produced by convert_caida_dataset"
iplaneNcaidaFile - file containing iplane links not in caida
caidadataset - caida relationships converted by convert_caida_dataset
exampleusage:
python iplanecaidaInfoGathering.py "iplaneNcaidaFile" "caidaDataset"

latencyDistribution.awk - script takes interASinterPoP file generated by using iplane data on
intraASInterPoP.awk and outputs the probability of each latency ignoring -9999

exampleusage:
gawk -f latencyDistribution "interASinterPoP" > "latencyDistribution"

///////////////////////////////////////
/////// end SCRIPTS NOT NEEDED FOR   /
//////  SUBMIT, STILL DOCUMENTED ////
//////////////////////////////////////
