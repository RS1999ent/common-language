datasets- where the raw data is stored that will be converted by
scripts

scripts- where python, awk, bash scripts are stored

src- simulator source.

formatted data- data that is ready for the simulator to use as well as
the intermediate transitions of the data from raw to simulator

scripts for project should have some form of argument parsing that
tells you what it wants (not for scripts from Arrow or consensus routing)

scripts:

convert_caida_dataset.awk- input: caida AS relationships.  output:
customer-provider relationships and peer-peer relationships to stdout
old script, doesn't do argument parsing, but is very simple

intraASInterPop.awk - input: inter_pop_links; variables: output
interASFile, output intraASFile; output: interASinterPop file with
format AS1 AS2 latency pop1 pop2 and intraASinterPop file with format
AS|pop1 pop2 latency: ...

annotateIplaneData.py- input:interASinterPop file generated by
interASInterPop.awk, convertedcaida file generated by
convert_caida_dataset.awk, outFile where the annotated data is written
to, caidaNiplane output file where links in caida not found in iplane
are stored, iplaneNCaida where liks in iplane are not found in caida
is written; output: annotatedIplaneData of format AS1 AS2 relationship
latency pop1 pop2, caidaNiplane format AS1 AS2 relationship,
iplaneNCaida format AS1 AS2 latency pop1 pop2

asTypes.py- input: annotatedIplaneData generated from
annotateIplaneData.py, output file to hold results, --numtransits
percentage of semi-upgraded transits, --seedtransit seed to use in
rgenerator for generating tranits, --seedWiser not currentlyt used,
but woudld be seed for generating a wiser node(s); output: file with
labeled ASes in format AS TYPE, where type is a well defined number

TYPE
BGP 500
WISER 501
TRANSIT = 502

findStubs.py- input: annotatedIplaneData generated by
annotateIplaneData.py, outfile to write output; output: writes stub
ases and the number of neighbors they have to file specified in input
in format AS #neighbors


old scripts from arrow and consensus routing that aren't currently used:

cut-single-homed-parents.awk
multi-homed-parents.awk
multi-homed-parents.py
run.sh
single-homed-parents.awk
skip-non-short.awk
tst-dataset.awk
tier2s.py

scripts that are partially written and aren't used currently:

iplaneNcaidaInfoGathering.py
trimAnnotatedIplaneData.py

DEPENDENCY FOR SIMULATOR

simulator uses library for argument parsing
http://argparse4j.sourceforge.net/

SIMULATOR CMD

For integrated advertisements, the simulator expects:
annotatedIplaneData (generated by annotateIplaneData.py) asTypes (generated by asTypes.py) --seed --sim 7

sim should be 7 for integrated advertisement simulation.  other
simulations no longer work so any other sim other than "7" will likely
be broken.